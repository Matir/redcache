syntax = "proto3";
package config;

option go_package = "github.com/Matir/redcache/config/pb";

message Config {
    // List of tools to serve
    repeated Tool tool = 1;
    // Path to prepend to all other paths
    string root_path = 2;
    // Hide the index page
    bool hide_index = 3;
    // Listenaddr, as in 0.0.0.0:6666
    string listen_addr = 4;
    // Cache directory, may begin with ~/ for home directory.
    string cache_dir = 5;
}

// Tool is a single servable tool entry
message Tool {
    // Visible name for tool
    string name = 1;
    // Path(s) under which to serve tool
    // Launching fails if this is not globally unique
    repeated string path = 2;
    // Sources to obtain the tool
    repeated ToolSource source = 3;
    // Hashes to verify before serving
    repeated FileHash hash = 4;
    // Should we attempt to embed this?
    bool embed = 5;
    // Filename to provide when serving
    // If empty, last component of path is used
    string filename = 6;
    // Content-type, otherwise application/octet-stream
    string content_type = 7;

    enum Platform {
        PLATFORM_UNKNOWN = 0;
        PLATFORM_ANY = 1;
        PLATFORM_LINUX = 2;
        PLATFORM_WINDOWS = 3;
        PLATFORM_OSX = 4;
    }

    enum Architecture {
        ARCH_UNKNOWN = 0;
        ARCH_ANY = 1;
        ARCH_X86 = 2;
        ARCH_X64 = 3;
        ARCH_ADM = 4;
    }

    // Platform and architecture
    Platform platform = 8;
    Architecture arch = 9;
}

// Toolsource describes a single source for getting the tool.
message ToolSource {
    // The path to obtain the tool.
    // May be a local path or a HTTP(S) path to be retrieved.
    string source_path = 1;
    // If the source path is a supported archive, this path is extracted.
    string archive_path = 2;
    // If the file is compressed, but not an archive, decompress with this.
    string decompress_with = 3;
}

enum FileHashType {
    SHA256 = 0;
}

message FileHash {
    // Type of hash to compute
    FileHashType type = 1;
    // Value of hash
    string hash = 2;
}
